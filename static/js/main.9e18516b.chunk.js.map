{"version":3,"sources":["components/Todo.js","actions/todo.js","actions/action-types.js","components/TodoForm.js","reducer/todo.js","store.js","App.js","serviceWorker.js","index.js"],"names":["connect","state","todos","dispatch","markComplete","id","type","payload","removeTodo","className","ListGroup","map","todo","ListGroupItem","key","title","style","cursor","onClick","toast","addTodo","useState","setTitle","handleSubmit","e","preventDefault","closeOnClick","v4","position","Form","onSubmit","FormGroup","InputGroup","Input","name","placeholder","value","onChange","target","InputGroupAddon","addonType","Button","color","initialState","rootReducer","combineReducers","action","filter","store","createStore","App","Container","fluidz","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSA4CeA,eAVS,SAACC,GAAD,MAAY,CAClCC,MAAOD,EAAMC,UAGY,SAACC,GAAD,MAAe,CACxCC,aAAc,SAACC,GACbF,ECjCsB,SAACE,GAAD,MAAS,CACjCC,KCPyB,cDQzBC,QAASF,GD+BEG,CAAWH,QAITL,EApCF,SAAC,GAA6B,IAA3BE,EAA0B,EAA1BA,MAAOE,EAAmB,EAAnBA,aACrB,OACE,yBAAKK,UAAU,OACb,kBAACC,EAAA,EAAD,CAAWD,UAAU,aAClBP,EAAMS,KAAI,SAACC,GAAD,OACT,kBAACC,EAAA,EAAD,CAAeC,IAAKF,EAAKP,IACtBO,EAAKG,MACN,0BACEC,MAAO,CAAEC,OAAQ,WACjBC,QAAS,WACPd,EAAaQ,EAAKP,IAClBc,YAAM,eAAgB,CACpBb,KAAM,aAGVG,UAAU,eAEV,kBAAC,IAAD,gB,wEG6CCT,eAPS,SAACC,GAAD,MAAY,MACT,SAACE,GAAD,MAAe,CACxCiB,QAAS,SAACR,GACRT,EFhEmB,SAACS,GAAD,MAAW,CAChCN,KCHsB,WDItBC,QAASK,GE8DEQ,CAAQR,QAINZ,EAtDE,SAAC,GAAiB,IAAfoB,EAAc,EAAdA,QAAc,EACNC,mBAAS,IADH,mBACzBN,EADyB,KAClBO,EADkB,KAG1BC,EAAe,SAACC,GAEpB,GADAA,EAAEC,iBACY,KAAVV,EACF,OAAOI,YAAM,aAAc,CACzBb,KAAM,QACNoB,cAAc,IAGlB,IAAMd,EAAO,CACXG,QACAV,GAAIsB,eAENP,EAAQR,GACRO,YAAM,aAAc,CAClBb,KAAM,YAERgB,EAAS,KAEX,OACE,6BACE,kBAAC,IAAD,CAAgBM,SAAS,aACzB,kBAACC,EAAA,EAAD,CAAMC,SAAUP,GACd,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACE3B,KAAK,OACL4B,KAAK,OACL7B,GAAG,OACH8B,YAAY,iBACZC,MAAOrB,EACPsB,SAAU,SAACb,GAAD,OAAOF,EAASE,EAAEc,OAAOF,UAErC,kBAACG,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUxB,QAASK,GAAjC,e,wBClDRoB,EAAe,GCCfC,EAAcC,YAAgB,CAClC3C,MDAa,WAAmC,IAAlCD,EAAiC,uDAAzB0C,EAAcG,EAAW,uCAC/C,OAAQA,EAAOxC,MACb,IFNoB,WEOlB,MAAM,GAAN,mBAAWL,GAAX,CAAkB6C,EAAOvC,UAC3B,IFPuB,cEQrB,OAAON,EAAM8C,QAAO,SAACnC,GAAD,OAAUA,EAAKP,KAAOyC,EAAOvC,WACnD,QACE,OAAON,MCFE+C,EAFDC,YAAYL,GCeXM,EAXH,WACV,OACE,kBAAC,IAAD,CAAUF,MAAOA,GACf,kBAACG,EAAA,EAAD,CAAWC,QAAM,GACf,kBAAC,EAAD,MACA,kBAAC,EAAD,SCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e18516b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\r\nimport { FaCheckDouble } from \"react-icons/fa\";\r\n//redux\r\nimport { connect } from \"react-redux\";\r\nimport { removeTodo } from \"../actions/todo\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Todo = ({ todos, markComplete }) => {\r\n  return (\r\n    <div className=\"neo\">\r\n      <ListGroup className=\"mt-5 mb-2\">\r\n        {todos.map((todo) => (\r\n          <ListGroupItem key={todo.id}>\r\n            {todo.title}\r\n            <span\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={() => {\r\n                markComplete(todo.id);\r\n                toast(\"Todo removed\", {\r\n                  type: \"warning\",\r\n                });\r\n              }}\r\n              className=\"float-right\"\r\n            >\r\n              <FaCheckDouble />\r\n            </span>\r\n          </ListGroupItem>\r\n        ))}\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  todos: state.todos,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  markComplete: (id) => {\r\n    dispatch(removeTodo(id));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo);\r\n","import { ADD_TODO, REMOVE_TODO } from \"./action-types\";\r\n\r\nexport const addTodo = (todo) => ({\r\n  type: ADD_TODO,\r\n  payload: todo,\r\n});\r\n\r\nexport const removeTodo = (id) => ({\r\n  type: REMOVE_TODO,\r\n  payload: id,\r\n});\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n} from \"reactstrap\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { v4 } from \"uuid\";\r\n//redux\r\nimport { connect } from \"react-redux\";\r\nimport { addTodo } from \"../actions/todo\";\r\n\r\nconst TodoForm = ({ addTodo }) => {\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (title === \"\") {\r\n      return toast(\"Enter Todo\", {\r\n        type: \"error\",\r\n        closeOnClick: true,\r\n      });\r\n    }\r\n    const todo = {\r\n      title,\r\n      id: v4(),\r\n    };\r\n    addTodo(todo);\r\n    toast(\"Todo added\", {\r\n      type: \"success\",\r\n    });\r\n    setTitle(\"\");\r\n  };\r\n  return (\r\n    <div>\r\n      <ToastContainer position=\"top-left\" />\r\n      <Form onSubmit={handleSubmit}>\r\n        <FormGroup>\r\n          <InputGroup>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"todo\"\r\n              id=\"todo\"\r\n              placeholder=\"Your next todo\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            />\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <Button color=\"primary\" onClick={handleSubmit}>\r\n                ADD\r\n              </Button>\r\n            </InputGroupAddon>\r\n          </InputGroup>\r\n        </FormGroup>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addTodo: (todo) => {\r\n    dispatch(addTodo(todo));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoForm);\r\n","import { ADD_TODO, REMOVE_TODO } from \"../actions/action-types\";\r\n\r\nconst initialState = [];\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_TODO:\r\n      return [...state, action.payload];\r\n    case REMOVE_TODO:\r\n      return state.filter((todo) => todo.id !== action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport todos from \"./reducer/todo\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todos,\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Todo from \"./components/Todo\";\nimport TodoForm from \"./components/TodoForm\";\nimport { Container } from \"reactstrap\";\n\n//redux\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Container fluidz>\n        <Todo />\n        <TodoForm />\n      </Container>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}